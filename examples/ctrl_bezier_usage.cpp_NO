#include <sstream>
#include <iomanip>

#include "twg/window.h"
#include "twg/ctrl.h"
#include "twg/image/image_drawing.h"

using namespace twg;

class MovableCtrl : public CtrlBase 
{
public:
	MovableCtrl(EventsBase* parent) : 
		CtrlBase(parent), 
		m_current(STATE_DEFAULT) {}

	//-------------------------------------------------------------------------
	bool onMouse(Point_i pos, MouseType type) final;
	bool onKeyboard(KeyType key, bool isDown) final;
	void draw(ImageBase* buffer) final;
protected:
	virtual bool isInside(Point_i pos) = 0;
	virtual void move(Point_i diff) = 0;

	virtual bool onRMouse(Point_i pos) {};
	virtual bool onWheel(Point_ri pos, MouseType wheel) {};

	virtual void drawDefault(ImageBase* buffer) {};
	virtual void drawHover(ImageBase* buffer) { drawDefault(buffer); };
	virtual void drawWhenMove(ImageBase* buffer) { drawDefault(buffer); };

private:
	enum MyState
	{
		STATE_DEFAULT,
		STATE_MOVE,
		STATE_HOVER
	};

	MyState			m_current;
	Point_i 		m_lastPos;
};
//-----------------------------------------------------------------------------

enum BezierMessages {
	POINT_DELETE,
	LINE_MOVE,
	LINE_ROTATE_UP,
	LINE_ROTATE_DOWN,
	BEZIER_UPDATE_POINTS
};

//-----------------------------------------------------------------------------

class PointCtrl : MovableCtrl
{
public:
	PointCtrl(Point_d& pos, int32u id, EventsBase* parent) : 
		MovableCtrl(id, parent), 
		m_pos(pos) {}

	bool onMessage(int32u messageNo, void* data);
private:
	Point_d& 			m_pos;
	static double 		m_radius = 5;

	const static double ms_minRadius = 2;
	const static double ms_maxRadius = 20;

	//-------------------------------------------------------------------------
	bool isInside(Point_i pos);
	void move(Point_i diff);

	void onRMouse(Point_i pos);
	void onWheel(MouseType wheel);

	void drawDefault(ImageBase* buffer);
	void drawHover(ImageBase* buffer);
	void drawWhenMove(ImageBase* buffer);
};

//-----------------------------------------------------------------------------

class LineCtrl : MovableCtrl
{
public:
	LineCtrl(Point_d& a, Point_d& d, int32u id, EventsBase* parent) : 
		MovableCtrl(id, parent), 
		m_a(a),
		m_b(b) {}
private:
	Point_d& 			m_a;
	Point_d& 			m_b;
	static double 		m_width = 2;

	//-------------------------------------------------------------------------
	bool isInside(Point_i pos);
	void move(Point_i diff);

	void onWheel(MouseType wheel);

	void drawDefault(ImageBase* buffer);
};

//-----------------------------------------------------------------------------
class BezierLineCtrl : MovableCtrl
{
public:
	BezierLineCtrl(std::vector<Point_d>& points, int32u id, EventsBase* parent);

	bool onMessage(int32u messageNo, void* data);
private:
	std::vector<Point_d>&	m_points;
	Point_d 				m_offset;
	ImageBase				m_buffer;
	static double 			m_width = 3;

	//-------------------------------------------------------------------------
	bool isInside(Point_i pos);
	void move(Point_i diff);

	void onWheel(MouseType wheel);

	void drawDefault(ImageBase* buffer);
};

//-----------------------------------------------------------------------------

class BezierCtrl : CtrlBase
{
public:
	BezierCtrl(std::vector<Point_d>& points, int32u id, EventsBase* parent);

private:
	CtrlStorage				m_storage;
	std::vector<Point_d>&	m_points;

	void makeCtrl(void);
};

//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================

void BezierCtrl::makeCtrl(void) {
	m_storage.pushCtrl(new BezierLineCtrl(m_points, m_storage->getUniqueId(), m_storage));
	for (int i = 0; i < m_point.size()-1; ++i) {
		m_storage.pushCtrl(new LineCtrl(m_points[i], m_points[i+1], m_storage->getUniqueId(), m_storage));
	}
	for (int i = 0; i < m_point.size(); ++i) {
		m_storage.pushCtrl(new PointCtrl(m_points[i], m_storage->getUniqueId(), m_storage));
	}
}

BezierCtrl::BezierCtrl(std::vector<Point_d>& points, 
					   int32u id, 
					   EventsHandler* parent) :
	m_points_id(300, 0),
	m_points(points),
	CtrlBase(id, parent), 
	m_storage(0, this) {
	makeCtrl();
}

bool BezierCtrl::onMouse(Point_i pos, MouseType type) {
	if (!m_storage.onMouse(pos, type)) {
		// Значит ни один контрол не принял сообщение мыши
		switch (type) {
			case MOUSE_R_UP:
				m_points.push_back(pos);
				onMessage(BEZIER_UPDATE_POINTS);
				return true;
			case MOUSE_WHEEL_UP:
				// Увеличить масштаб относительно точки pos
				// Операция только над m_points
				return true;
			case MOUSE_WHEEL_DOWN:
				// Уменьшить масштаб относительно точки pos
				// Операция только над m_points
				return true;
		}
	} else
		return true;
};

bool BezierCtrl::onKeyboard(int32 key, bool isDown) {
	return m_storage.onKeyboard(key, isDown);
};

bool BezierCtrl::onMessage(int32u messageNo, void* data) {
	if (messageNo == BEZIER_UPDATE_POINTS) {
		m_storage.clear();
		makeCtrl();
		return true
	}

	return m_storage.onMessage(messageNo, data);
};

bool BezierCtrl::sendMessageUp(int32u messageNo, void* data) {
	switch (messageNo) {
		case POINT_DELETE:
			m_points.erase(m_points.begin() + i);
			onMessage(BEZIER_UPDATE_POINTS, nullptr);
			if (m_points.size() == 0) 
				sendMessageUp(CTRL_DELETE, (void*)(&id));
			return true;
		case LINE_MOVE:
		case BEZIER_MOVE:
			// Переместить все точки на (*(Point_i*)(data))
			// Операция только над m_points
			return true;
		case LINE_ROTATE_UP:
			// Повращать все точки на один градус по часовой
			// Операция только над m_points
			return true;
		case LINE_ROTATE_DOWN:
			// Повращать все точки на один градус против часовой
			// Операция только над m_points
			return true;
	}

	return false;
};

void BezierCtrl::ddraw(ImageBase* buffer) {
	ImageDrawing_aa img(buffer);

	img.setBrush(setAlpha(White, 128));
	img.drawPolygon(computeEllipse(m_pos, Point_d(m_radius, m_radius)));

	switch (m_state) {
		case POINT_DEFAULT:
			img.setPen(Red);
			break;
		case POINT_MOVE:
			img.setPen(setAlpha(Orange,128));
			break;
		case POINT_HOVER:
			img.setPen(Orange);
			break;
	}
	img.drawPolyline(computeEllipse(m_pos, Point_d(m_radius, m_radius)));
}

//-----------------------------------------------------------------------------

void PointCtrl::move(Point_i diff) {
	m_pos += diff;
}


bool PointCtrl::isInside(Point_i pos) {
	return (m_pos-pos).getLength() < m_radius;
}


void PointCtrl::onRMouse(Point_i pos) {
	std::ostringstream out;
    out << std::setprecision(2) << L"=" << id << L" Удалить точку | --- | " << id << L" | --- | Координаты: | " << m_pos.x << '\t' << m_pos.y << L" | Радиус:\t" << m_radius;

    int32u* id = sendMessageUp(CTRL_GET_UNIQUE_ID, nullptr);

    sendMessageUp(CTRL_PUSH, new Menu(out.str(), true, *(int32u*)(), m_parent));
}

bool PointCtrl::onMessage(int32u messageNo, void* data) {
	if (messageNo == MENU_CLICK) {
		if ((*(int32u*)(data)) == id) {
			sendMessageUp(POINT_DELETE, (void*)&id);
			return true;		
		}
	}
}

void PointCtrl::onWheel(MouseType wheel) {
	switch (wheel) {
		case MOUSE_WHEEL_UP:
			if (m_radius < ms_maxRadius)
				m_radius++;
			break;
		case MOUSE_WHEEL_DOWN:
			if (m_radius > ms_minRadius)
				m_radius--;
			break;
	}
}

void PointCtrl::drawDefault(ImageBase* buffer) {
	ImageDrawing_aa img(buffer);

	img.setBrush(setAlpha(White, 128));
	img.drawPolygon(computeEllipse(m_pos, Point_d(m_radius, m_radius)));
	img.setPen(Pen(1, Red));
	img.drawPolyline(computeEllipse(m_pos, Point_d(m_radius, m_radius)));
}

void PointCtrl::drawHover(ImageBase* buffer) {
	ImageDrawing_aa img(buffer);

	img.setBrush(setAlpha(White, 128));
	img.drawPolygon(computeEllipse(m_pos, Point_d(m_radius, m_radius)));
	img.setPen(Pen(1, Orange));
	img.drawPolyline(computeEllipse(m_pos, Point_d(m_radius, m_radius)));
}

void PointCtrl::drawWhenMove(ImageBase* buffer) {
	ImageDrawing_aa img(buffer);

	img.setBrush(setAlpha(White, 128));
	img.drawPolygon(computeEllipse(m_pos, Point_d(m_radius, m_radius)));
	img.setPen(Pen(1, setAlpha(Orange,128)));
	img.drawPolyline(computeEllipse(m_pos, Point_d(m_radius, m_radius)));
}

//-----------------------------------------------------------------------------

bool LineCtrl::isInside(Point_i pos) {
	// Определение нахождения мыши возле отрезка.
	// Операция только над pos
}

void LineCtrl::move(Point_i diff) {
	sendMessageUp(LINE_MOVE, (void*)&diff);
}

void LineCtrl::onWheel(MouseType wheel) {
	switch (wheel) {
		case MOUSE_WHEEL_UP:
			sendMessageUp(LINE_ROTATE_UP, nullptr);
			break;
		case MOUSE_WHEEL_DOWN:
			sendMessageUp(LINE_ROTATE_DOWN, nullptr);
			break;
	}
}


void LineCtrl::drawDefault(ImageBase* buffer) {
	ImageDrawing_aa img(buffer);

	img.setPen(Pen(m_width, black));
	img.drawLine(m_a, m_b);
}

//-----------------------------------------------------------------------------
void BezierLineCtrl::drawBezier() {
	// Посчитать массив точек кривой. Оптимизировать, удалив те, где наклон отличается незначительно от соседей
	// Найти ограничивающий прямоугольник среди всех этих точек
	// Записать смещение
	// Ресайзить буфер так, чтобы он по размерам был чуть больше ширины ограничивающего прямоугольинка
	ImageDrawing_aa img(m_buffer);

	img.setPen(Pen(m_width, Black));
	img.drawPolyline(computedPoints);
}

BezierLineCtrl::BezierLineCtrl(std::vector<Point_d>& points, int32u id, EventsHandler* parent) : 
	MovableCtrl(id, parent), 
	m_points(points),
	m_buffer(Point_i(1, 1)) {
	drawBezier();
}

bool BezierLineCtrl::isInside(Point_i pos) {
	// Определение нахождения мыши возле всех отрезков кривой Безье.
	// Операция только над m_points и pos
}

void BezierLineCtrl::move(Point_i diff) {
	sendMessageUp(LINE_MOVE, (void*)&diff);
}

bool BezierLineCtrl::onMessage(int32u messageNo, void* data) {
	if (messageNo == BEZIER_UPDATE_POINTS) {
		drawBezier();
		return true;
	}
	return false;
}

void BezierLineCtrl::onWheel(MouseType wheel) {
	switch (wheel) {
		case MOUSE_WHEEL_UP:
			sendMessageUp(LINE_ROTATE_UP, nullptr);
			break;
		case MOUSE_WHEEL_DOWN:
			sendMessageUp(LINE_ROTATE_DOWN, nullptr);
			break;
	}
}

void BezierLineCtrl::drawDefault(ImageBase* buffer) {
	m_buffer.copyTo(buffer, m_offset, Point_i(0,0), m_buffer.size());
}

//-----------------------------------------------------------------------------

bool MovableCtrl::onMouse(Point_i pos, MouseType type) 
{
	bool isHandle = false;
	bool on = isInside(pos);

	if (m_current == STATE_HOVER) {
		switch (type) {
			case MOUSE_R_UP:
				isHandle |= onRMouse(pos);
				break;
			case MOUSE_WHEEL_UP:
			case MOUSE_WHEEL_DOWN:
				isHandle |= onWheel(pos, type);
				break;
		}
	}

	if (m_current == STATE_MOVE && type == MOUSE_MOVE) {
		move(pos-m_lastPos);
		m_lastPos = pos;
		isHandle |= true;
	}

	switch (type) {
		case MOUSE_MOVE:
			if (on && !(m_current == STATE_MOVE)) {
				m_current = STATE_HOVER;
				isHandle |= true;
			}
			if (!on && (m_current != STATE_MOVE) && (m_current != STATE_DEFAULT)) {
				m_current = STATE_DEFAULT;
				isHandle |= true;
			}
			break;
		case MOUSE_L_DOWN:
			if (on) {
				m_lastPos = pos;
				m_current = STATE_MOVE;
				isHandle |= true;
			}
			break;
		case MOUSE_L_UP:
			if (m_current == STATE_MOVE) {
				m_current = STATE_HOVER;
				isHandle |= true;
			}
			break;
	}
	
	switch (m_current) {
		case STATE_HOVER:
			setCursor(CURSOR_CLICK);
			break;
		case STATE_MOVE:
			setCursor(CURSOR_CLICK);
			break;
	}

	return isHandle;
};

bool MovableCtrl::onKeyboard(KeyType key, bool isDown) 
{
	if (isDown && (m_current == STATE_MOVE || m_current == STATE_HOVER))
	switch (key) {
		case VK_UP:
			move(Point_i(0, -1));
			m_lastPos += Point_i(0, -1);
			return true;
		case VK_DOWN:
			move(Point_i(0, 1));
			m_lastPos += Point_i(0, 1);
			return true;
		case VK_LEFT:
			move(Point_i(-1, 0));
			m_lastPos += Point_i(-1, 0);
			return true;
		case VK_RIGHT:
			move(Point_i(1, 0));
			m_lastPos += Point_i(1, 0);
			return true;
	}

	return false;
}

void MovableCtrl::draw(ImageBase* buffer) {
	switch (m_current) {
		case STATE_DEFAULT:
			drawDefault(buffer);
			break;
		case STATE_MOVE:
			drawWhenMove(buffer);
			break;
		case STATE_HOVER:
			drawHover(buffer);
			break;
	}
}

//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================

class ObjectsAllocator : CtrlBase
{
public:
	// Здесь можно создавать различные объекты. Так же можно выбирать какой из объектов будет активным, и какой можно удалить. Если выбрана опция когда все объекты активные, то нельзя выбрать неактивным объект.

	ObjectsAllocator(int32u nObjects, EventsBase* parent) : 
		CtrlBase(parent), 
		m_storage(0, parent),
		m_menu(L"", false, Point_i(0, 0), parent),
		m_nObjects(nObjects),
		m_oneMsg4OneObj(false) {
		makeMenu();
		m_storageParent = sendMessageUp(CTRL_GET_POINTER, nullptr);
		m_windowParent = sendMessageUp(WINDOW_GET_POINTER, nullptr);
		int32u id = 0; onMessage(MENU_CLICK, &id);
		int32u id = 400; onMessage(MENU_CLICK, &id);
	}

	virtual CtrlBase* getObject(int32u i);
	virtual std::string getObjectName(int32u i);

	//-------------------------------------------------------------------------
	bool onMessage(int32u messageNo, void* data);
protected:
	struct Object 
	{ 
		Object() : id(0), objectNo(0), active(true) {}
		int 	id; 
		int 	objectNo; 
		bool 	active; 
	};

	bool				m_oneMsg4OneObj;
	int32u				m_nObjects;
	std::vector<Object> m_Objects;
	CtrlStorage			m_storage;
	WindowCtrl*			m_windowParent;
	Menu* 				m_menu;

	void makeMenu(void);
};

//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================

void ObjectsAllocator::makeMenu(void) {
	std::ostringstream sout;

	id = 0;

	sout << L"Добавить > ";
	for (int i = 0; i < m_nObjects; ++i) {
		sout << L"=" << id+i << L" " << getObjectName(i) << L" | ";
	}
	sout << L" < ";

	id = 20;

	sout << L"Активировать > ";
	for (int i = 0; i < m_objects.size(); ++i) {
		sout << L"=" << id+i << (m_objects[i].active) ? L" ! " : L" " << getObjectName(m_objects[i].objectNo) << L"\t" << m_objects[i].id << L" | ";
	}
	sout << L" < ";

	id = 200;

	sout << L"Удалить > ";
	for (int i = 0; i < m_objects.size(); ++i) {
		sout << L"=" << id+i << L" " << getObjectName(m_objects[i].objectNo) << L"\t" << m_objects[i].id << L" | ";
	}
	sout << L" < ";

	sout << L"Настройки > ";
	id = 400;
	sout << L"=" << id << (m_oneMsg4OneObj) ? L" ! " : L" " << L"Одно сообщение - один объект";
	sout << L" < "

	id = 401;

	sout << L"=" << id << L" " << L"Выйти";

	menu->makeMenu(sout.str(), false);
}

bool ObjectsAllocator::onMessage(int32u messageNo, void* data) {
	if (messageNo == MENU_CLICK) {
		int32u id = *(int32u*)(data);
		if (id < 20) { // Создать объект
			m_storage.array.push_back(getObject(id));
			m_Objects.push_back(Object(m_storage.array.back()->id, id, true));
		} else if (id < 200) { // Удалить объект
			// удалить из массива объектов
			// удалить из ctrl
		} else if (id < 400) { // Активировать объект
			m_Objects[messageNo-200].active = !m_Objects[messageNo-200].active;
			m_windowParent->invalidateScreen();
			makeMenu();
		} else if (id == 400) { // Настройка - одно сообщение, один объект
			m_oneMsg4OneObj = !m_oneMsg4OneObj;
			m_ctrlParent->setForOneMode(m_oneMsg4OneObj);
		} else if (id == 401) {
			m_windowParent->~WindowCtrl();
			exit(0);
		};
	}
}

//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================

int main() {
	WindowCtrl wnd(0, Point_i(0, 0), Point_i(640, 480), Point_i(-1, -1), Point_i(-1, -1), L"Bezier Creator", WINDOW_STANDART);

	wnd.storage.pushCtrl(new MenuHandler(&wnd.storage));

	return 0;
}

/** 
	Необходимые функции кривой Безье:
		[x] Отрисовка вместе с точками и отрезками.
		[x] Перемещение кривой. - по нажатию ЛКМ на отрезки и саму кривую
		[x] Вращение кривой. - по кручению колесика мыши над линиями.
		[x] Изменение масштабов кривой. - кручение колесика над пустотой
		[x] Передвижение точек. - по нажатию ЛКМ на точках.
		[x] Добавление точек. - по нажатию ЛКМ на пустом пространстве.
		[x] Удаление точек. - по нажатию ПКМ на точке.
	Хранилище кривых Безье:
		Включен режим, что только один контрол может обрабатывать сообщения
		Процесс рисования:
			Рисуются в буфер все неактивные кривые
			Далее этот буфер рисуется с половинной прозрачнотью в основной буфер
			Потом в основной рисуются основные кривые
		Неактивная кривая Безье:
			[x] Не получает сообщений.
			[ ] Активация какой-либо кривой Безье - только из меню
	Общее окно:
		[ ] Меню, где можно:
			[ ] Выйти
			[ ] Выбрать из существующих кривых какую сделать активной
				[ ] Переключиться вверх\вниз между кривыми, Page Up, Page Down 
			[ ] Создать кривую
			[ ] Удалить текущую кривую
		[ ] Показывать номер текущей кривой
		[ ] Показывать количество точек текущей кривой 
 */